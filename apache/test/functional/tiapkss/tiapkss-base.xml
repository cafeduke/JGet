<?xml version="1.0"?>
<project name="tiapkss.base">
  <description>
    Team base file

    It defines properties and libraries that are used by all team Ant file.
    User can also add utlity targets.
  </description>

  <!-- ==================================================================== -->
  <!-- START: Properties                                                    -->
  <!-- ==================================================================== -->

  <!-- ADDED-BY-SEED Absolute path to this file -->
  <dirname property="tiapkss.base.dir" file="${ant.file.tiapkss.base}" />

  <!-- ADDED-BY-SEED Standard property to identify team base directory -->
  <property name="team.base.dir" value="${tiapkss.base.dir}"/>

  <!-- ADDED-BY-SEED Team to which tests belong -->
  <property name="team" value="tiapkss"/>

    
  <!-- ==================================================================== -->
  <!-- START: Imports                                                       -->
  <!-- ==================================================================== -->

  <!-- ADDED-BY-SEED Import functional area base file -->
  <import file="${tiapkss.base.dir}/../functional-base.xml" />


  <!-- ADDED-BY-SEED Marker file which is created when team setup target has
                     successfully run
   -->
  <property name="team.setup.marker.file"
       value="${run.output.dir}/tiapkss-setup-marker.properties" />

  <!-- ==================================================================== -->
  <!-- oraDisplay -->
  <!-- ==================================================================== -->
  <target name="oraDisplay">
  <description>
     Display certs in a given wallet using:
      $ORACLE_HOME/oracle_common/bin/orapki wallet display -wallet path

     Params:
       ${out.log}    - output from orapki command into T_WORK
       ${walletPath} - path to directory containing cwallet.sso
  </description>
     <property name="oraDir" value="${ORACLE_HOME}/oracle_common/bin"/>

     <!-- Determine version of orapki -->
     <if>
      <isset property="isWindows"/>
      <then>
        <property name="myex" value="${oraDir}/orapki.bat"/>
      </then>
      <else>
        <property name="myex" value="${oraDir}/orapki"/>
      </else>
     </if>

     <echo file="${twork.dir}/${out.log}">Running:
${myex} wallet display -wallet ${walletPath}
###########################################
     </echo>

     <tl-exec name="oraDisplay" executable="${myex}"
           cmdfile="${twork.dir}/tmp.txt"
           output="${twork.dir}/${out.log}"
           append="true"
           failonerror="true">
           <arg line="wallet" />
           <arg line="display" />
           <arg line="-wallet ${walletPath}" />
           <env key="JAVA_HOME" value="${ORACLE_JAVA_HOME}"/>
        </tl-exec>
  </target>

  <!-- ==================================================================== -->
  <!-- pingKSS -->
  <!-- ==================================================================== -->
  <target name="pingKSS">
  <description>
     Bounce OHS (stop/start), then ping OHS to be sure it's working
     Params:
       ${tstName}      - name of the tests - needed for output files
       ${ohsName}      - name of instance to use
  </description>

    <!-- Bounce OHS to pick up the changes -->
    <antcall target="bounceOHS">
      <param name="start.log" value="${tstName}_start.log"/>
      <param name="ohs.name"  value="${ohsName}"/>
    </antcall>

    <!-- Ping the instance -->
    <antcall target="pingOHS_ssl">
      <param name="out.log" value="${tstName}_ssl.log"/>
      <param name="ohs.name" value="${ohsName}"/>
      <param name="url"     value="/hello.html"/>
    </antcall>
  </target>

  <!-- ==================================================================== -->
  <!-- pingVH -->
  <!-- ==================================================================== -->
  <target name="pingVH">
  <description>
     Bounce OHS (stop/start), then ping OHS to be sure it's working
     We have already applied a virtual host config file and need
     to pingSSL vs. ports 9001, 9002, 9003
     Params:
       ${tstName}      - name of the tests - needed for output files
       ${ohsName}      - name of instance to use
  </description>

    <!-- Bounce OHS to pick up the changes -->
    <antcall target="bounceOHS">
      <param name="start.log" value="${tstName}_start.log"/>
      <param name="ohs.name"  value="${ohsName}"/>
    </antcall>

    <!-- Ping the instance on 9001 -->
    <antcall target="pingOHS_ssl">
      <param name="out.log"  value="${tstName}_ssl_k1.log"/>
      <param name="ohs.name" value="${ohsName}"/>
      <param name="url"      value="/hello.html"/>
      <param name="port"     value="9001"/>
    </antcall>
  
    <!-- Ping the instance on 9002 -->
    <antcall target="pingOHS_ssl">
      <param name="out.log"  value="${tstName}_ssl_k2.log"/>
      <param name="ohs.name" value="${ohsName}"/>
      <param name="url"      value="/hello.html"/>
      <param name="port"     value="9002"/>
    </antcall>

    <!-- Ping the instance on 9003 -->
    <antcall target="pingOHS_ssl">
      <param name="out.log"  value="${tstName}_ssl_k3.log"/>
      <param name="ohs.name" value="${ohsName}"/>
      <param name="url"      value="/hello.html"/>
      <param name="port"     value="9003"/>
    </antcall>

  </target>


 </project>
