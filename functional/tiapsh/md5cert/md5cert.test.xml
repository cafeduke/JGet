<?xml version="1.0" encoding="utf-8"?>
<project name="tiapsh.md5cert" default="usage">
  <description>
    functional tiapsh md5cert tests.
    Negative test case.  We will add a MD5 cert to the OHS wallet.
    OHS should fail to start thereafter.  Added in 12.2.1.3.0.

    @testlogic.group  type="working" values="true"  
    @testlogic.group type="install"  values="standalone,restricted,compact,full"
    @testlogic.group type="ssl" values="true"
    @testlogic.group type="winFIPS" values="false"

  </description>

  <!-- ADDED-BY-SEED Absolute path to this file -->
  <dirname property="tiapsh.md5cert.dir" file="${ant.file.tiapsh.md5cert}" />

  <!-- ADDED-BY-SEED Import base file -->
  <import file="${tiapsh.md5cert.dir}/../tiapsh-test-base.xml" />

  <target name="suite">
    <description>
       This suite will generate a test wallet, adding an MD5 self-signed
       certificate.  OHS should fail to start subsequently.
    </description>

    <antcall target="ohsStart"/>

  </target>

 <!-- =================================================== -->
  <target name="ohsStart">

  <property name="tstName"    value="tiapsh_md5cert_ohsStart"/>
  <property name="ohsName"    value="ohs1"/>
  <property name="walletName" value="tiapsh_md5cert_wallet"/>

  <!-- Create MD5 test wallet in $T_WORK for md5cert exception test -->
  <tl-exec name="createMD5Wallet" executable="perl"
      cmdfile="${twork.dir}/tmp.txt"
      output="${twork.dir}/tiapsh_md5cert_create.log"
      failonerror="true">
      <arg line="${team.base.dir}/common/perl/createMD5Wallet.pl" />
      <arg line="${walletName}" />
      <env key="T_WORK"       value="${twork.dir}" />
      <env key="ORACLE_HOME"  value="${ORACLE_HOME}" />
  </tl-exec>
 
  <antcall target="configureOHS">
    <param name="tstName"    value="${tstName}"/>
    <param name="ohsName"    value="${ohsName}"/>
    <param name="walletName" value="${twork.dir}/${walletName}"/>
  </antcall>

  </target>

  <!-- =================================================== -->
  <target name="configureOHS">
  <description>
     Update the SSLWallet to use test wallet and try to start OHS.
     Afterwards return to original ssl.conf
     Params:
       ${tstName}     - test name
       ${ohsName}     - OHS instance
       ${walletName}  - testWallet to use
  </description>
 
  <!-- Apply the configuration -->
  <!-- Need to do it to both versions of ssl.conf -->
  <property name="ssl.conf.1" value="${ohsConfDir}/${ohsName}/ssl.conf"/>
  <property name="ssl.conf.2" value="${ohsConfDir}/instances/${ohsName}/ssl.conf"/>
  <replaceregexp file="${ssl.conf.1}"
                 match="SSLWallet (.*)"
                 replace="SSLWallet ${walletName}"/>
  <replaceregexp file="${ssl.conf.2}"
                 match="SSLWallet (.*)"
                 replace="SSLWallet ${walletName}"/>

  <copy file="${ssl.conf.2}"
        tofile="${twork.dir}/${tstName}.ssl.conf" overwrite="true"/>

  <!-- Try to start OHS -->
  <!-- trycatch will fail if pids are not zero and state is not FAILED -->
  <trycatch>
  <try>
  <antcall target="startOHS">
    <param name="out.log"  value="${tstName}.out"/>
    <param name="ohs.name" value="${ohsName}"/>
  </antcall>
  
  <!-- Verify no pids are running --> 
  <antcall target="chkPids">
    <param name="pidName"  value="httpd"/>
    <param name="expected" value="0"/>
    <param name="outfile"  value="${tstName}_pids.log"/>
    <param name="ohsName"  value="${ohsName}"/>
  </antcall>

  <!-- Verify state = FAILED -->
  <antcall target="chkState">
    <param name="ohsName" value="${ohsName}"/>
    <param name="expected" value="FAILED"/>
    <param name="outfile" value="${tstName}_state.log"/>
  </antcall>
  </try>

  <finally>
  <!-- Cleanup:  restore original ssl.conf to both versions -->
  <copy file="${twork.dir}/tiapsh.ssl.conf.orig"
        tofile="${ssl.conf.1}" overwrite="true"/>
  <copy file="${twork.dir}/tiapsh.ssl.conf.orig"
        tofile="${ssl.conf.2}" overwrite="true"/>
  </finally>
  </trycatch>

  </target>
  
</project>

