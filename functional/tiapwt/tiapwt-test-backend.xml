<?xml version="1.0"?>
<project name="test.tiapwt.base">
  <description>
   Base file of all tiapwt tests.
  </description>
	
  <!-- ADDED-BY-SEED Absolute path to this file -->
  <dirname property="test.tiapwt.base.dir" file="${ant.file.test.tiapwt.base}" />

  <!-- ADDED-BY-SEED Import tiapwt base file -->
  <import file="${test.tiapwt.base.dir}/tiapwt-base.xml" />

  <!-- Import TLR core to run with TestLogic -->
  <import file="${testtool.3rdparty.testlogic.dir}/tlr-core-root.xml"/>

  <!-- ADDED-BY-SEED Import common test file targets -->
  <import file="${tl.cafe.file}"/>

  <!-- ====================================================================
    START: ADDED-BY-SEED Template generated code. Don't edit
   ===================================================================== -->
  <sequential>
    <!--
      Runs setup if it's neven been run. This is to help users to come to
      any test file and just run the target. Setup is run, if it's neven
      been run.
     -->

    <if>
      <not><available file="${team.setup.marker.file}"/></not>
      <then>
        <ant antfile="${team.base.dir}/build.xml"
             target="setup"
        />
      </then>
    </if>

  </sequential>
  <!-- ====================================================================
    END: ADDED-BY-SEED: Template generated code. Don't edit
   ===================================================================== -->

  <!-- Common validate for all tiapwt tests -->

  <!-- =================================================== -->
  <!-- prepare -->
  <!-- =================================================== -->

  <target name="prepare" >
  <description>
     Remove any old logfiles lingering in T_WORK
  </description>
        <delete>
      <fileset dir="${twork.dir}" includes="tiapwt.ear"/>
  	  <fileset dir="${twork.dir}" includes="tiapwt_config.txt"/>
      <fileset dir="${twork.dir}" includes="tiapwt_backend*"/>
     </delete>
	<antcall target="OHSsetup"/>
	<antcall target="WLSsetup"/>
  </target>

  <!-- =================================================== -->
  <!-- setup  -->
  <!-- =================================================== -->

  <target name="OHSsetup">
	<description>
		Setup for tiapwt(Waiter) test.
	</description>

	<!--Capture IP address-->
	 <tl-exec name="getIp" executable="perl"
           cmdfile="${twork.dir}/tmp.txt"
           output="${twork.dir}/tiapwt_backend_Ip.log"
           failonerror="true">
           <arg line="${tiapwt.base.dir}/common/scripts/getIP.pl" />
           <env key="T_WORK"       value="${twork.dir}" />
		   
	</tl-exec>
	<loadproperties srcFile="${twork.dir}/tiapwt_backend_Ip.log"/>

	 <!--Run backend SSL script-->
     <tl-exec name="backend_SSL" executable="perl"
           cmdfile="${twork.dir}/backend_temp.txt"
           output="${twork.dir}/tiapwt_backend_script.log"
           failonerror="true">
           <arg line="${tiapwt.base.dir}/common/scripts/tiapwt_backend.pl" />
           <env key="T_WORK"       value="${twork.dir}" />
            <env key="WLS_USER"       value="${WLS_USER}" />
           <env key="WLS_PWD"       value="${WLS_PWD}" />
           <env key="JAVA_HOME"       value="${JAVA_HOME}" />
           <env key="ADMIN_SSL_PORT" value="${ADMIN_SSL_PORT}" />
		  <env key="ORACLE_HOME" value="${ORACLE_HOME}" />
		  <env key="DOMAIN_HOME" value="${DOMAIN_HOME}" />
		  <env key="WLST_LOC"   value="${WLST_LOC}" />
          <env key="ADMIN_HOST"       value="${ADMIN_HOST}"/>
           <env key="ADMIN_PORT"       value="${ADMIN_PORT}"/>    
    </tl-exec>
    <loadproperties srcFile="${twork.dir}/tiapwt_backend_script.log"/>
 
    <!-- Force WLS to bounce to pick up changes -->
    <antcall target="bounceWLS">
       <param name="stopWLS.log"  value="${twork.dir}/tiapwt_backend_stopWLS.log"/>
       <param name="startWLS.log" value="${twork.dir}/tiapwt_backend_startWLS.log"/>
    </antcall> 

	<property name="tiapwt.data.dir" value="${tiapwt.base.dir}/common/data"/>
	 <property name="tiapwt.java.dir" value="${tiapwt.base.dir}/common/java"/>
    <property name="srcdir" location="${tiapwt.java.dir}" />
     <delete verbose="true">
       <fileset dir="${srcdir}" includes="**/*.class" />
    </delete>
    <javac srcdir="${srcdir}" destdir="${srcdir}"/>

	<!--Modify OHS-->
	<copy file ="${tiapwt.data.dir}/tiapwt_config_backend.txt" todir="${twork.dir}"/>
	<move file ="${twork.dir}/tiapwt_config_backend.txt" tofile="${twork.dir}/tiapwt_config.txt" overwrite="true"/>
	<replaceregexp file="${twork.dir}/tiapwt_config.txt"
						match="%T_WORK%" replace="${twork.dir}" byline="true"/>
	<replaceregexp file="${twork.dir}/tiapwt_config.txt"
                        match="%ADMIN_HOST%" replace="${IP_HOST}" byline="true"/>
	<replaceregexp file="${twork.dir}/tiapwt_config.txt"
                        match="%ADMIN_PORT%" replace="${ADMIN_PORT}" byline="true"/>
	<replaceregexp file="${twork.dir}/tiapwt_config.txt"
                        match="%ADMIN_SSL_PORT%" replace="${ADMIN_SSL_PORT}" byline="true"/>

	<property name="master_dir" value="${ohsConfDir}/ohs1"/>
	<property name="runtime_dir" value="${ohsConfDir}/instances/ohs1"/>

	<!--Clean up OHS-->
	<if>
	 <available file="${master_dir}/mod_wl_ohs.conf.tiapwt"/>
	 <then>
		<copy file ="${master_dir}/mod_wl_ohs.conf.tiapwt" tofile="${master_dir}/mod_wl_ohs.conf" overwrite="true"/>
	    <delete file="${master_dir}/mod_wl_ohs.conf.tiapwt"/>

		<copy file ="${runtime_dir}/mod_wl_ohs.conf.tiapwt" tofile="${runtime_dir}/mod_wl_ohs.conf" overwrite="true"/>
        <delete file="${runtime_dir}/mod_wl_ohs.conf.tiapwt"/>

	 </then>
	</if>
	 
    <!--Backup OHS-->
	<copy file ="${master_dir}/mod_wl_ohs.conf" tofile="${master_dir}/mod_wl_ohs.conf.tiapwt"/>
	<copy file ="${runtime_dir}/mod_wl_ohs.conf" tofile="${runtime_dir}/mod_wl_ohs.conf.tiapwt"/>

  	<!--Modify OHS file-->
	<concat destfile="${master_dir}/mod_wl_ohs.conf" append="true" fixlastline="yes">
		<filelist dir="${twork.dir}" files="tiapwt_config.txt"/>
	</concat>
	<concat destfile="${runtime_dir}/mod_wl_ohs.conf" append="true" fixlastline="yes">
        <filelist dir="${twork.dir}" files="tiapwt_config.txt"/>
    </concat>

	
	<!--Bounce OHS-->
	<trycatch property="bob">
		<try>
	 <antcall target="stopOHS">
        <param name="out.log"  value="tiapwt_backend_stop.log"/>
        <param name="ohs.name" value="ohs1"/>
     </antcall>
	</try>

	</trycatch>

	<antcall target="startOHS">
        <param name="out.log"  value="tiapwt_backend_start.log"/>
        <param name="ohs.name" value="ohs1"/>
     </antcall>		
	</target>
	
	<!--WLS Setup-->

	<target name="WLSsetup">
	<antcall target="build1"/>
	<antcall target="ear"/>
	<!--copy file ="/scratch/skaneria/work/tiapwt.ear" tofile="${twork.dir}/tiapwt.ear"/-->
	<tl-exec name="deployWeblogic" executable="perl"
           cmdfile="${twork.dir}/tmp.txt"
           output="${twork.dir}/tiapwt_backend_deploy.log"
           failonerror="true">
           <arg line="${functional.base.dir}/common/perl/weblogic-deploy.pl" />
		   <arg line="tiapwt.ear"/>
           <env key="T_WORK"       value="${twork.dir}" />
           <env key="WLS_USER"       value="${WLS_USER}" />
	       <env key="WLS_PWD"       value="${WLS_PWD}" />
           <env key="ORACLE_JAVA_HOME"       value="${ORACLE_JAVA_HOME}" />
 		   <env key="WL_DEPLOY_CLASSPATH"       value="${WL_DEPLOY_CLASSPATH}"/>
		  <env key="ADMIN_HOST"       value="${ADMIN_HOST}"/>
           <env key="ADMIN_PORT"       value="${ADMIN_PORT}"/>  			
    </tl-exec>    
	</target>
 <trycatch>
 <try>
	<property name="src.dir"  value="${tiapwt.base.dir}/weblogic/src" />
    <property name="dest.dir" value="${src.dir}/tiapwtEAR" />

     <path id="class.path">
     <pathelement location="${MW_HOME}/wlserver/server/lib/weblogic.jar" />
    <pathelement location="${MW_HOME}/oracle_common/modules/net.sf.antcontrib_1.1.0.0_1-0b3/lib/ant-contrib.jar"/>    
 </path> 
	<property name="weblogic.class.path" refid="class.path" />
	<taskdef name="wlcompile" classpathref="class.path" classname="weblogic.ant.taskdefs.build.WLCompileTask"/>
    <taskdef name="wlpackage" classpathref="class.path" classname="weblogic.ant.taskdefs.build.WLPackageTask"/>
  </try>
  </trycatch>

  <!-- =================================================== -->
  <!-- Build EAR  -->
  <!-- =================================================== -->


	<target name="build1">
	<!-- <wlcompile srcdir="${src.dir}" destdir="${dest.dir}"/> -->
	<!--javac deprecation="false" debug="true" debuglevel="lines,vars,source"/-->

	</target>

	<!-- Package a standard J2EE ear for distribution  -->

   <target name="ear" depends="build" description="Package a standard J2EE EAR for distribution">
     <property name="ear"      value="${twork.dir}/tiapwt.ear"/>
	 <wlpackage srcdir="${src.dir}" destdir="${dest.dir}"
               toFile="${ear}" />
  </target>
  
  <!-- =================================================== -->
  <!-- Clean Up  -->
  <!-- =================================================== -->

	<target name="unprepare">
		<description>
			
    	</description>
	 <!--Run cleanup backend SSL script-->
     <tl-exec name="bk_clean_SSL" executable="perl"
           cmdfile="${twork.dir}/backend_clean_temp.txt"
           output="${twork.dir}/tiapwt_backend_clean.log"
           failonerror="true">
           <arg line="${tiapwt.base.dir}/common/scripts/tiapwt_bk_clean.pl" />
           <env key="T_WORK"       value="${twork.dir}" />
            <env key="WLS_USER"       value="${WLS_USER}" />
           <env key="WLS_PWD"       value="${WLS_PWD}" />
           <env key="JAVA_HOME"       value="${JAVA_HOME}" />
           <env key="ADMIN_SSL_PORT" value="${ADMIN_SSL_PORT}" />
          <env key="ORACLE_HOME" value="${ORACLE_HOME}" />
          <env key="DOMAIN_HOME" value="${DOMAIN_HOME}" />
          <env key="WLST_LOC"   value="${WLST_LOC}" />
          <env key="ADMIN_HOST"       value="${ADMIN_HOST}"/>
           <env key="ADMIN_PORT"       value="${ADMIN_PORT}"/>
    </tl-exec>
    <loadproperties srcFile="${twork.dir}/tiapwt_backend_clean.log"/>


	<property name="master_dir" value="${ohsConfDir}/ohs1"/>
    <property name="runtime_dir" value="${ohsConfDir}/instances/ohs1"/>
		
	<!--Clean up OHS-->
    <if>    
     <available file="${master_dir}/mod_wl_ohs.conf.tiapwt"/>
     <then>  
        <copy file ="${master_dir}/mod_wl_ohs.conf.tiapwt" tofile="${master_dir}/mod_wl_ohs.conf" overwrite="true"/>
        <delete file="${master_dir}/mod_wl_ohs.conf.tiapwt"/>

        <copy file ="${runtime_dir}/mod_wl_ohs.conf.tiapwt" tofile="${runtime_dir}/mod_wl_ohs.conf" overwrite="true"/>
        <delete file="${runtime_dir}/mod_wl_ohs.conf.tiapwt"/>

     </then> 
    </if>   
     
    <!--Bounce OHS-->
    <trycatch property="bob">
        <try>
     <antcall target="stopOHS">
        <param name="out.log"  value="tiapwt_backend_stop.log"/>
        <param name="ohs.name" value="ohs1"/>
     </antcall>
    </try>

    </trycatch>

	 <antcall target="startOHS">
        <param name="out.log"  value="tiapwt_backend_start.log"/>
        <param name="ohs.name" value="ohs1"/>
     </antcall>
    </target>

</project>
