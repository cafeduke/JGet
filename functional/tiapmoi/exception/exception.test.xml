<?xml version="1.0" encoding="utf-8"?>
<project name="tiapmoi.exception" default="usage">
  <description>
    functional tiapmoi exception tests.

    @testlogic.group  type="working" values="true"
    @testlogic.group type="install"  values="restricted,compact,full"
    @testlogic.group type="winFIPS" values="false"

  </description>

  <!-- ADDED-BY-SEED Absolute path to this file -->
  <dirname property="tiapmoi.exception.dir" file="${ant.file.tiapmoi.exception}" />

  <!-- ADDED-BY-SEED Import base file -->
  <import file="${tiapmoi.exception.dir}/../tiapmoi-test-base.xml" />

  <!-- =================================================== -->
  <!-- prepare -->
  <!-- =================================================== -->

  <target name="prepare" >
  <description>
     Remove any old logfiles lingering in T_WORK
  </description>
    <firsttimeonly>
     <delete>
        <fileset dir="${twork.dir}" includes="tiapmoi_exception*"/>
     </delete>
    </firsttimeonly>
  </target>

  <!-- =================================================== -->
  <!-- suite -->
  <!-- =================================================== -->

  <target name="suite">
    <description>
       Error exception testing.  Note that update commands will be tested
       in tiapinst.
    </description>
  
    <!-- createOHSInstance -->
    <antcall target="01"/>
    <antcall target="02"/>
    <antcall target="03"/>

    <!-- deleteOHSInstance -->
    <antcall target="04"/>

    <!-- start() -->
    <antcall target="05"/>    

    <!-- restart() -->
    <antcall target="06"/>

    <!-- shutdown() -->
    <antcall target="07"/>

    <!-- state() -->
    <antcall target="08"/>

    <!-- OHS misconfiguration - start, restart, shutdown -->
    <antcall target="09"/>

  </target>

   <!-- ====================================================== -->
   <target name="01">
   <description>
     createOHSInstance - common exceptions
   </description>

       <property name="tstName" value="tiapmoi_exception_01"/>
       <property name="ohsName" value="ohs01"/>
       <property name="script"  value="ohs_crt_common.py"/>
       <copy file="${gold.genpath}/exception01.gold"
         tofile="${twork.dir}/${tstName}.gold"/>
   
       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>

   </target>

   <!-- ====================================================== -->
   <target name="02">
   <description>
     createOHSInstance - OHS naming exceptions
   </description>

       <property name="tstName" value="tiapmoi_exception_02"/>
       <property name="ohsName" value="ohs02"/>
       <property name="script"  value="ohs_crt_naming_rules.py"/>
       <copy file="${gold.genpath}/exception02.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="03">
   <description>
     createOHSInstance - port mgmt exceptions
   </description>

       <property name="tstName" value="tiapmoi_exception_03"/>
       <property name="ohsName" value="ohs03"/>
       <property name="script"  value="ohs_crt_port_exceptions.py"/>
       <copy file="${gold.genpath}/exception03.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <!-- instantiate the gold file -->
       <replaceregexp file="${twork.dir}/${tstName}.gold"
           match="%MACHINE_NAME%" replace="${MACHINE_NAME}" byline="true" />
       <replaceregexp file="${twork.dir}/${tstName}.gold"
           match="%ADMIN_PORT%" replace="${ADMIN_PORT}" byline="true" />
       <replaceregexp file="${twork.dir}/${tstName}.gold"
           match="%ADMIN_SSL_PORT%" replace="${ADMIN_SSL_PORT}" byline="true" />

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="04">
   <description>
     deleteOHSInstance
   </description>

       <property name="tstName" value="tiapmoi_exception_04"/>
       <property name="ohsName" value="ohs04"/>
       <property name="script"  value="ohs_del_common.py"/>
       <copy file="${gold.genpath}/exception04.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="05">
   <description>
     start
   </description>

       <property name="tstName" value="tiapmoi_exception_05"/>
       <property name="ohsName" value="ohs05"/>
       <property name="script"  value="ohs_start_common.py"/>
       <copy file="${gold.genpath}/exception05.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="06">
   <description>
     restart
   </description>

       <property name="tstName" value="tiapmoi_exception_06"/>
       <property name="ohsName" value="ohs06"/>
       <property name="script"  value="ohs_restart_common.py"/>
       <copy file="${gold.genpath}/exception06.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="07">
   <description>
     shutdown
   </description>

       <property name="tstName" value="tiapmoi_exception_07"/>
       <property name="ohsName" value="ohs07"/>
       <property name="script"  value="ohs_shutdown_common.py"/>
       <copy file="${gold.genpath}/exception07.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="08">
   <description>
     state
   </description>

       <property name="tstName" value="tiapmoi_exception_08"/>
       <property name="ohsName" value="ohs08"/>
       <property name="script"  value="ohs_state_common.py"/>
       <copy file="${gold.genpath}/exception08.gold"
         tofile="${twork.dir}/${tstName}.gold"/>

       <antcall target="wrapScript">
          <param name="script" value="${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>


   </target>

   <!-- ====================================================== -->
   <target name="09">
   <description>
     Testing start, restart, and shutdown with an misconfiguration
     in an OHS config file.
   </description>

       <property name="tstName" value="tiapmoi_exception_09"/>
       <copy file="${gold.genpath}/exception09.gold"
         tofile="${twork.dir}/${tstName}.gold"/>
       <property name="wlst.dir" value="${tiapmoi.base.dir}/common/wlst/"/>

       <!-- Create three OHS instances and start two -->
       <antcall target="wlstRunScript">
          <param name="script" value="${wlst.dir}/ohs_misconfig_setup.py"/>
          <param name="ohsName" value="bogus"/>
          <param name="outfile" value="${tstName}_setup.log"/>
       </antcall>

       <!-- Apply the misconfiguration to all three instances -->
       <property name="mod.dir1" 
                value="${ohsConfDir}/instances/ohs01/moduleconf"/>
       <property name="mod.dir2" 
                value="${ohsConfDir}/instances/ohs02/moduleconf"/>
       <property name="mod.dir3" 
                value="${ohsConfDir}/instances/ohs03/moduleconf"/>
       <copy file="${tiapmoi.base.dir}/common/misconfig.conf"
            todir="${mod.dir1}" />
       <copy file="${tiapmoi.base.dir}/common/misconfig.conf"
           todir="${mod.dir2}" />
       <copy file="${tiapmoi.base.dir}/common/misconfig.conf"
            todir="${mod.dir3}" />

       <!-- Run the script to test operation w/ misconfig -->
       <keepgoing>
       <antcall target="wrapScript">
          <param name="script" value="ohs_misconfig_common.py"/>
          <param name="ohsName" value="bogus"/>
          <param name="tstName" value="${tstName}"/>
       </antcall>

       <!-- Verify no pids runing after operation -->
       <antcall target="chkPids">
         <param name="pidName" value="httpd"/>
        <param name="expected" value="0"/>
        <param name="outfile" value="${tstName}_pids1.log"/>
        <param name="ohsName" value="ohs01"/>
       </antcall>
       <antcall target="chkPids">
         <param name="pidName" value="httpd"/>
        <param name="expected" value="0"/>
        <param name="outfile" value="${tstName}_pids2.log"/>
        <param name="ohsName" value="ohs02"/>
       </antcall>

       <antcall target="chkPids">
         <param name="pidName" value="httpd"/>
        <param name="expected" value="0"/>
        <param name="outfile" value="${tstName}_pids3.log"/>
        <param name="ohsName" value="ohs03"/>
       </antcall>

       <!-- Perform cleanup operation -->
       <!-- Deletion will not work on a FAILED instance, so -->
       <!-- ohs01 and ohs02 will still be around. -->
       <delete file="${mod.dir1}/misconfig.conf"/>
       <delete file="${mod.dir2}/misconfig.conf"/>

       <antcall target="wlstRunScript">
          <param name="script" value="${wlst.dir}/ohs_misconfig_clean.py"/>
          <param name="ohsName" value="bogus"/>
          <param name="outfile" value="${tstName}_clean.log"/>
       </antcall>
       </keepgoing>

   </target>

   <!-- ====================================================== -->
    <target name="wrapScript">
    <description>
      Quick wrapper to call wlstRunScript.
      Params:
         ${script}      - script to run
         ${ohsName}     - OHS instance to create/use
         ${tstName}     - test name
         
         Note goldfile is assumed to be ${twork.dir}/${tstName}.gold.
    </description>
       <property name="wlst.dir" value="${tiapmoi.base.dir}/common/wlst/"/>

       <!-- Run the WLST script -->
       <antcall target="wlstRunScript">
          <param name="script" value="${wlst.dir}/${script}"/>
          <param name="ohsName" value="${ohsName}"/>
          <param name="outfile" value="${tstName}.out"/>
       </antcall>
        
       <!-- compare script output to the goldfile -->
       <antcall target="wlstCompareLogs">
           <param name="logfile"  value="${tstName}.out"/>
           <param name="goldfile" value="${tstName}.gold"/>
           <param name="outfile"  value="${tstName}.log"/>
       </antcall>
     </target>

</project>

 
